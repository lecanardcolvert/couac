// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace webapp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "30eb34b8-e8b8-4cd3-ad50-bed648061426",
                            ConcurrencyStamp = "1d8c1145-adac-4142-a4b4-ed583cbce9b0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e49a6a1d-079a-46f9-ac72-5533f51f5261",
                            ConcurrencyStamp = "b6af58ac-c6d4-46c9-9312-ec1a0a171b6e",
                            Name = "CustomerPeople",
                            NormalizedName = "CUSTOMERPEOPLE"
                        },
                        new
                        {
                            Id = "7ecfd535-91e8-4d52-b37d-cc013ce0a6fa",
                            ConcurrencyStamp = "618d6a2b-4392-4271-addf-6b2903b9afd9",
                            Name = "CustomerBusiness",
                            NormalizedName = "CUSTOMERBUSINESS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "9203227c-5334-41a2-99aa-a10fe9d6a24c",
                            RoleId = "30eb34b8-e8b8-4cd3-ad50-bed648061426"
                        },
                        new
                        {
                            UserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            RoleId = "30eb34b8-e8b8-4cd3-ad50-bed648061426"
                        },
                        new
                        {
                            UserId = "cdab76aa-de88-4f05-8f35-1add2498069a",
                            RoleId = "30eb34b8-e8b8-4cd3-ad50-bed648061426"
                        },
                        new
                        {
                            UserId = "0d68d397-971f-4333-b0b9-c316f44b081b",
                            RoleId = "30eb34b8-e8b8-4cd3-ad50-bed648061426"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CivicNumber")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Terrebonne",
                            CivicNumber = 2502,
                            Country = "Canada",
                            PostalCode = "J6X 0A5",
                            State = "QC",
                            Street = "Des jacinthes"
                        },
                        new
                        {
                            Id = 2,
                            AppartmentNumber = 2,
                            City = "Montreal",
                            CivicNumber = 2265,
                            Country = "Canada",
                            PostalCode = "H1V 2E6",
                            State = "QC",
                            Street = "Boulevard PIE-IX"
                        },
                        new
                        {
                            Id = 3,
                            City = "Montreal",
                            CivicNumber = 4500,
                            Country = "Canada",
                            PostalCode = "H1V 3N8",
                            State = "QC",
                            Street = "Hochelaga"
                        });
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descrption")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ville")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9203227c-5334-41a2-99aa-a10fe9d6a24c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82a7b79a-e94e-40d3-936f-6971b4ef6a6d",
                            Descrption = "J'aime les Teckels et je suis ici pour participer a des courses a Teckel",
                            Email = "jordangauthier@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Jordan",
                            LastName = "Gauthier",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORDANGAUTHIER@NONAME.COM",
                            NormalizedUserName = "JORDANGAUTHIER@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCGYZM5XaC1P8Hkf+uakozyNeCmVBV0BREvWKyVN81V7B/z5/LSY77IcszsoHRG0A==",
                            PhoneNumber = "514-979-7316",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c56e9707-b04d-4af7-b4ff-14eba8a2f99c",
                            TwoFactorEnabled = false,
                            UserName = "jordangauthier@noname.com",
                            ville = "Terrebonne"
                        },
                        new
                        {
                            Id = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6259be83-a68d-4a85-bc09-0f81f544c540",
                            Descrption = "J'aime le Hockey et je suis ici pour jouer au Hockey",
                            Email = "alexdufour@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Alex",
                            LastName = "Dufour",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXDUFOUR@NONAME.COM",
                            NormalizedUserName = "ALEXDUFOUR@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCGYZM5XaC1P8Hkf+uakozyNeCmVBV0BREvWKyVN81V7B/z5/LSY77IcszsoHRG0A==",
                            PhoneNumber = "514-911-9111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aadf0bef-46ac-47db-9e0e-b6353765513a",
                            TwoFactorEnabled = false,
                            UserName = "alexdufour@noname.com",
                            ville = "Montreal"
                        },
                        new
                        {
                            Id = "cdab76aa-de88-4f05-8f35-1add2498069a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47ea0cfd-cab9-47c0-84dd-ad398bf0a66b",
                            Descrption = "J'aime le Karate et je suis ici pour ca",
                            Email = "alexhamel@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Alexandre",
                            LastName = "Hamel-Boudreault",
                            LockoutEnabled = false,
                            NormalizedEmail = "alexhamel@noname.com",
                            NormalizedUserName = "alexhamel@noname.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCGYZM5XaC1P8Hkf+uakozyNeCmVBV0BREvWKyVN81V7B/z5/LSY77IcszsoHRG0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32c1cead-c794-4495-86bf-80b8d7fc4d27",
                            TwoFactorEnabled = false,
                            UserName = "alexhamel@noname.com",
                            ville = "Montreal"
                        },
                        new
                        {
                            Id = "0d68d397-971f-4333-b0b9-c316f44b081b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e39359f7-1953-4d84-90fc-59d77b1d40d1",
                            Descrption = "J'aime les Statistiques et je suis ici pour rejoindre un club de chess",
                            Email = "philippesoucy@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Philippe",
                            LastName = "Soucy",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHILIPPESOUCY@NONAME.COM",
                            NormalizedUserName = "PHILIPPESOUCY@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMCGYZM5XaC1P8Hkf+uakozyNeCmVBV0BREvWKyVN81V7B/z5/LSY77IcszsoHRG0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f14822fb-90f9-4ecc-b170-5870b1eaae62",
                            TwoFactorEnabled = false,
                            UserName = "philippesoucy@noname.com",
                            ville = "Montreal"
                        });
                });

            modelBuilder.Entity("Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            Description = " Nous offrons des services d'entrainement et des levers de fonds Venez essayer 1 mois gratuitNous nos locaux Hochelga",
                            Name = "Pro gym",
                            Phone = "(514) 252-8704"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 1,
                            Description = " Nous offrons des services d'entrainement et des levers de fonds",
                            Name = "Groupe tazor",
                            Phone = "(514) 911-9111"
                        });
                });

            modelBuilder.Entity("Models.Commentaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Commentaires");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Wow malade l'evenement",
                            EventId = 1,
                            UserId = "9203227c-5334-41a2-99aa-a10fe9d6a24c"
                        });
                });

            modelBuilder.Entity("Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<double>("PriceToPayToParticipate")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            ApplicationUserId = "9203227c-5334-41a2-99aa-a10fe9d6a24c",
                            BusinessId = 1,
                            Description = "Fun fun Zumba de Jordan perte de poids assurer 100% garantie.",
                            EndDate = new DateTime(2020, 4, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 4, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Zumba de Jordan"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            BusinessId = 2,
                            Description = "Venez reprendre le poids Perdu a La Zumba de jordan!",
                            EndDate = new DateTime(2020, 4, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 2,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 4, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Souper spaghetti de dufour (Lever de fond)"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 2,
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            BusinessId = 2,
                            Description = "Je suis du passer!",
                            EndDate = new DateTime(2020, 2, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 2, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Evenement Dans le Passer"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 2,
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            BusinessId = 2,
                            Description = "Je suis du passer!",
                            EndDate = new DateTime(2020, 1, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 1, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Evenement De Tennis"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 2,
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            BusinessId = 2,
                            Description = "Belle course de 50km",
                            EndDate = new DateTime(2020, 1, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 1, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "La Course de Montreal"
                        });
                });

            modelBuilder.Entity("Models.EventApplicationUser", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventApplicationUsers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "9203227c-5334-41a2-99aa-a10fe9d6a24c",
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = "9203227c-5334-41a2-99aa-a10fe9d6a24c",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            EventId = 3
                        },
                        new
                        {
                            ApplicationUserId = "cdab76aa-de88-4f05-8f35-1add2498069a",
                            EventId = 3
                        },
                        new
                        {
                            ApplicationUserId = "cdab76aa-de88-4f05-8f35-1add2498069a",
                            EventId = 4
                        },
                        new
                        {
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            EventId = 4
                        },
                        new
                        {
                            ApplicationUserId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            EventId = 5
                        },
                        new
                        {
                            ApplicationUserId = "0d68d397-971f-4333-b0b9-c316f44b081b",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "cdab76aa-de88-4f05-8f35-1add2498069a",
                            EventId = 2
                        });
                });

            modelBuilder.Entity("Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Entrainement"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Lever de fond"
                        });
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageConversationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Est-tu pret big ?",
                            MessageConversationId = 1,
                            UserId = "9203227c-5334-41a2-99aa-a10fe9d6a24c"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Je sais pas toi ?",
                            MessageConversationId = 1,
                            UserId = "6257cae4-eeca-4dcc-905a-a708319028a8"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Je sais pas non plus.",
                            MessageConversationId = 1,
                            UserId = "9203227c-5334-41a2-99aa-a10fe9d6a24c"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Mtseee",
                            MessageConversationId = 1,
                            UserId = "6257cae4-eeca-4dcc-905a-a708319028a8"
                        });
                });

            modelBuilder.Entity("Models.MessageConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("MessageConversations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ReceiverId = "6257cae4-eeca-4dcc-905a-a708319028a8",
                            SenderId = "9203227c-5334-41a2-99aa-a10fe9d6a24c",
                            Subject = "tournois de cs pas d'awp"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Business", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany("Businesses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Commentaire", b =>
                {
                    b.HasOne("Models.Event", "Event")
                        .WithMany("Commentaires")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Event", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany("Events")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Events")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Business", "Business")
                        .WithMany("Events")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.EventApplicationUser", b =>
                {
                    b.HasOne("Models.ApplicationUser", "ApplicationUser")
                        .WithMany("EventsParticipation")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.HasOne("Models.MessageConversation", "MessageConversation")
                        .WithMany("Messages")
                        .HasForeignKey("MessageConversationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.MessageConversation", b =>
                {
                    b.HasOne("Models.ApplicationUser", "Receiver")
                        .WithMany("MessageConversationsReceiver")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "Sender")
                        .WithMany("MessageConversationsSender")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
