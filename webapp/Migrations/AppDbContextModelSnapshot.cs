// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace webapp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ee77b2eb-c623-4e2f-a16b-eeebb3744774",
                            ConcurrencyStamp = "437f3e25-0ba3-4ea3-970a-33414f0064ac",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "88a36f70-99e6-4cef-8c72-e92d5536de1b",
                            ConcurrencyStamp = "0b60ac8e-06ec-4702-866c-df145f2b04bb",
                            Name = "CustomerPeople",
                            NormalizedName = "CUSTOMERPEOPLE"
                        },
                        new
                        {
                            Id = "96ceeed8-22de-426d-8cf6-a42ff20ed220",
                            ConcurrencyStamp = "99f8a9dc-b2f6-4370-a99a-332ca0ff6c59",
                            Name = "CustomerBusiness",
                            NormalizedName = "CUSTOMERBUSINESS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "14ad00d3-6ab5-49df-b269-44cde5f29e3e",
                            RoleId = "ee77b2eb-c623-4e2f-a16b-eeebb3744774"
                        },
                        new
                        {
                            UserId = "a935282e-2336-49c3-9811-28742e1242a4",
                            RoleId = "ee77b2eb-c623-4e2f-a16b-eeebb3744774"
                        },
                        new
                        {
                            UserId = "ae823a38-13c7-4916-a5b3-a7073cd2ecd1",
                            RoleId = "ee77b2eb-c623-4e2f-a16b-eeebb3744774"
                        },
                        new
                        {
                            UserId = "79274c29-3dd8-43c0-b92a-aec049dc087f",
                            RoleId = "ee77b2eb-c623-4e2f-a16b-eeebb3744774"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CivicNumber")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Terrebonne",
                            CivicNumber = 2502,
                            Country = "Canada",
                            PostalCode = "J6X 0A5",
                            State = "QC",
                            Street = "Des jacinthes"
                        },
                        new
                        {
                            Id = 2,
                            AppartmentNumber = 2,
                            City = "Montreal",
                            CivicNumber = 2265,
                            Country = "Canada",
                            PostalCode = "H1V 2E6",
                            State = "QC",
                            Street = "Boulevard PIE-IX"
                        },
                        new
                        {
                            Id = 3,
                            City = "Montreal",
                            CivicNumber = 4500,
                            Country = "Canada",
                            PostalCode = "H1V 3N8",
                            State = "QC",
                            Street = "Hochelaga"
                        });
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "14ad00d3-6ab5-49df-b269-44cde5f29e3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5de37be1-90bd-4a8f-8fc4-96b95c21fa00",
                            Email = "jordangauthier@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Jordan",
                            LastName = "Gauthier",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORDANGAUTHIER@NONAME.COM",
                            NormalizedUserName = "JORDANGAUTHIER@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJkpl6Zqtod+CrD298Kyfxks25FB6VVhLXpBMi+4eeLhMnLNT1uHH+ZlEBasrEAAOQ==",
                            PhoneNumber = "514-979-7316",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "07f9190a-d6a3-4fde-bfcc-83275b129876",
                            TwoFactorEnabled = false,
                            UserName = "jordangauthier@noname.com"
                        },
                        new
                        {
                            Id = "a935282e-2336-49c3-9811-28742e1242a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a6de4e6-e8b4-4d98-be31-292db445a288",
                            Email = "alexdufour@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Alex",
                            LastName = "Dufour",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXDUFOUR@NONAME.COM",
                            NormalizedUserName = "ALEXDUFOUR@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJkpl6Zqtod+CrD298Kyfxks25FB6VVhLXpBMi+4eeLhMnLNT1uHH+ZlEBasrEAAOQ==",
                            PhoneNumber = "514-911-9111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93be084a-cae0-4926-a949-5296f8a3457c",
                            TwoFactorEnabled = false,
                            UserName = "alexdufour@noname.com"
                        },
                        new
                        {
                            Id = "ae823a38-13c7-4916-a5b3-a7073cd2ecd1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9a894ff-28fd-4059-9559-b5553127c3a1",
                            Email = "alexhamel@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Alexandre",
                            LastName = "Hamel-Boudreault",
                            LockoutEnabled = false,
                            NormalizedEmail = "alexhamel@noname.com",
                            NormalizedUserName = "alexhamel@noname.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJkpl6Zqtod+CrD298Kyfxks25FB6VVhLXpBMi+4eeLhMnLNT1uHH+ZlEBasrEAAOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51aa32c3-8d7a-43e8-9b56-d456a025d3cb",
                            TwoFactorEnabled = false,
                            UserName = "alexhamel@noname.com"
                        },
                        new
                        {
                            Id = "79274c29-3dd8-43c0-b92a-aec049dc087f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70eba1d5-2ade-4b81-ade4-1ea49e2169f8",
                            Email = "philippesoucy@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Philippe",
                            LastName = "Soucy",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHILIPPESOUCY@NONAME.COM",
                            NormalizedUserName = "PHILIPPESOUCY@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJkpl6Zqtod+CrD298Kyfxks25FB6VVhLXpBMi+4eeLhMnLNT1uHH+ZlEBasrEAAOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17b984e7-921e-41b3-b3c4-94bc0caccf49",
                            TwoFactorEnabled = false,
                            UserName = "philippesoucy@noname.com"
                        });
                });

            modelBuilder.Entity("Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            Name = "Pro gym",
                            Phone = "(514) 252-8704"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 1,
                            Name = "Groupe tazor",
                            Phone = "(514) 911-9111"
                        });
                });

            modelBuilder.Entity("Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<double>("PriceToPayToParticipate")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            ApplicationUserId = "14ad00d3-6ab5-49df-b269-44cde5f29e3e",
                            BusinessId = 1,
                            EndDate = new DateTime(2020, 2, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 2, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Zumba de dufour"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ApplicationUserId = "a935282e-2336-49c3-9811-28742e1242a4",
                            BusinessId = 2,
                            EndDate = new DateTime(2020, 2, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 2, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Souper spaghetti de dufour (Lever de fond)"
                        });
                });

            modelBuilder.Entity("Models.EventApplicationUser", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventApplicationUsers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "14ad00d3-6ab5-49df-b269-44cde5f29e3e",
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = "a935282e-2336-49c3-9811-28742e1242a4",
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = "14ad00d3-6ab5-49df-b269-44cde5f29e3e",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "a935282e-2336-49c3-9811-28742e1242a4",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "79274c29-3dd8-43c0-b92a-aec049dc087f",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "ae823a38-13c7-4916-a5b3-a7073cd2ecd1",
                            EventId = 2
                        });
                });

            modelBuilder.Entity("Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Entrainement"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Lever de fond"
                        });
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageConversationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Est-tu pret big ?",
                            MessageConversationId = 1,
                            UserId = "14ad00d3-6ab5-49df-b269-44cde5f29e3e"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Je sais pas toi ?",
                            MessageConversationId = 1,
                            UserId = "a935282e-2336-49c3-9811-28742e1242a4"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Je sais pas non plus.",
                            MessageConversationId = 1,
                            UserId = "14ad00d3-6ab5-49df-b269-44cde5f29e3e"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Mtseee",
                            MessageConversationId = 1,
                            UserId = "a935282e-2336-49c3-9811-28742e1242a4"
                        });
                });

            modelBuilder.Entity("Models.MessageConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("MessageConversations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ReceiverId = "a935282e-2336-49c3-9811-28742e1242a4",
                            SenderId = "14ad00d3-6ab5-49df-b269-44cde5f29e3e",
                            Subject = "tournois de cs pas d'awp"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Business", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany("Businesses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.Event", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany("Events")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Events")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Business", "Business")
                        .WithMany("Events")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Models.EventApplicationUser", b =>
                {
                    b.HasOne("Models.ApplicationUser", "ApplicationUser")
                        .WithMany("EventsParticipation")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Event", "Event")
                        .WithMany("Members")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Message", b =>
                {
                    b.HasOne("Models.MessageConversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("MessageConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.MessageConversation", b =>
                {
                    b.HasOne("Models.ApplicationUser", "Receiver")
                        .WithMany("MessageConversationsReceiver")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "Sender")
                        .WithMany("MessageConversationsSender")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
