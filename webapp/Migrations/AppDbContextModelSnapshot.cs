// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace webapp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "04dada9c-cabc-45a6-bc0d-2514539de128",
                            ConcurrencyStamp = "5f912fad-721c-4b28-be67-d1702821de75",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0250a755-7025-4002-bafe-d9103d49ef21",
                            ConcurrencyStamp = "81b8bc0b-7069-4daf-bcda-cb58bb894294",
                            Name = "CustomerPeople",
                            NormalizedName = "CUSTOMERPEOPLE"
                        },
                        new
                        {
                            Id = "60194e0b-fa7c-40cc-8808-a33316405da2",
                            ConcurrencyStamp = "cf2c1c65-cce7-4c57-a530-ca8f007c8733",
                            Name = "CustomerBusiness",
                            NormalizedName = "CUSTOMERBUSINESS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "d147d359-bbb7-4095-8e15-d217779deaa8",
                            RoleId = "04dada9c-cabc-45a6-bc0d-2514539de128"
                        },
                        new
                        {
                            UserId = "937d51c8-19f0-4219-9a9c-169c92bb1626",
                            RoleId = "04dada9c-cabc-45a6-bc0d-2514539de128"
                        },
                        new
                        {
                            UserId = "f89ad1aa-4ae5-4f83-9083-b42ee060e187",
                            RoleId = "04dada9c-cabc-45a6-bc0d-2514539de128"
                        },
                        new
                        {
                            UserId = "1bffcd9f-7256-45c0-8317-c2823c82a32f",
                            RoleId = "04dada9c-cabc-45a6-bc0d-2514539de128"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CivicNumber")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Terrebonne",
                            CivicNumber = 2502,
                            Country = "Canada",
                            PostalCode = "J6X 0A5",
                            State = "QC",
                            Street = "Des jacinthes"
                        },
                        new
                        {
                            Id = 2,
                            AppartmentNumber = 2,
                            City = "Montreal",
                            CivicNumber = 2265,
                            Country = "Canada",
                            PostalCode = "H1V 2E6",
                            State = "QC",
                            Street = "Boulevard PIE-IX"
                        },
                        new
                        {
                            Id = 3,
                            City = "Montreal",
                            CivicNumber = 4500,
                            Country = "Canada",
                            PostalCode = "H1V 3N8",
                            State = "QC",
                            Street = "Hochelaga"
                        });
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d147d359-bbb7-4095-8e15-d217779deaa8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "959747b0-7e01-425e-a51f-d06da96848a9",
                            Email = "jordangauthier@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Jordan",
                            LastName = "Gauthier",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORDANGAUTHIER@NONAME.COM",
                            NormalizedUserName = "JORDANGAUTHIER@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECS/nrGvsClwsoYYiag3bhLPKyvQyVpz/LGtQZy2+KqcRS8niz0rhReicqGt2GmFfQ==",
                            PhoneNumber = "514-979-7316",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "501c6583-c1d4-468e-ba67-a27514e0056e",
                            TwoFactorEnabled = false,
                            UserName = "jordangauthier@noname.com"
                        },
                        new
                        {
                            Id = "937d51c8-19f0-4219-9a9c-169c92bb1626",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "702fb545-a945-4a5f-97b5-c2009dc3c1d6",
                            Email = "alexdufour@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Alex",
                            LastName = "Dufour",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXDUFOUR@NONAME.COM",
                            NormalizedUserName = "ALEXDUFOUR@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECS/nrGvsClwsoYYiag3bhLPKyvQyVpz/LGtQZy2+KqcRS8niz0rhReicqGt2GmFfQ==",
                            PhoneNumber = "514-911-9111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adc557cc-c873-445c-b311-c4dce4dba731",
                            TwoFactorEnabled = false,
                            UserName = "alexdufour@noname.com"
                        },
                        new
                        {
                            Id = "f89ad1aa-4ae5-4f83-9083-b42ee060e187",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd381d4c-e32d-4e86-a192-d1d758cc5327",
                            Email = "alexhamel@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Alexandre",
                            LastName = "Hamel-Boudreault",
                            LockoutEnabled = false,
                            NormalizedEmail = "alexhamel@noname.com",
                            NormalizedUserName = "alexhamel@noname.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECS/nrGvsClwsoYYiag3bhLPKyvQyVpz/LGtQZy2+KqcRS8niz0rhReicqGt2GmFfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e329c92e-489b-4cc0-a9dc-6da0856d4401",
                            TwoFactorEnabled = false,
                            UserName = "alexhamel@noname.com"
                        },
                        new
                        {
                            Id = "1bffcd9f-7256-45c0-8317-c2823c82a32f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "909bc8f7-af55-4360-940b-f147761083a1",
                            Email = "philippesoucy@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Philippe",
                            LastName = "Soucy",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHILIPPESOUCY@NONAME.COM",
                            NormalizedUserName = "PHILIPPESOUCY@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECS/nrGvsClwsoYYiag3bhLPKyvQyVpz/LGtQZy2+KqcRS8niz0rhReicqGt2GmFfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23df3418-513c-4eae-a2c5-07b43d585e81",
                            TwoFactorEnabled = false,
                            UserName = "philippesoucy@noname.com"
                        });
                });

            modelBuilder.Entity("Models.Entreprise", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("EntrepriseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntreprisePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Entreprise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            EntrepriseName = "Pro gym",
                            EntreprisePhone = "(514) 252-8704"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 1,
                            EntrepriseName = "Groupe tazor",
                            EntreprisePhone = "(514) 911-9111"
                        });
                });

            modelBuilder.Entity("Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<int?>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<double>("PriceToPayToParticipate")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            ApplicationUserId = "d147d359-bbb7-4095-8e15-d217779deaa8",
                            EndDate = new DateTime(2020, 2, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EntrepriseId = 1,
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 2, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Zumba de dufour"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ApplicationUserId = "937d51c8-19f0-4219-9a9c-169c92bb1626",
                            EndDate = new DateTime(2020, 2, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EntrepriseId = 2,
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 2, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Souper spaghetti de dufour (Lever de fond)"
                        });
                });

            modelBuilder.Entity("Models.EventApplicationUser", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventApplicationUsers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "d147d359-bbb7-4095-8e15-d217779deaa8",
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = "937d51c8-19f0-4219-9a9c-169c92bb1626",
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = "d147d359-bbb7-4095-8e15-d217779deaa8",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "937d51c8-19f0-4219-9a9c-169c92bb1626",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "1bffcd9f-7256-45c0-8317-c2823c82a32f",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "f89ad1aa-4ae5-4f83-9083-b42ee060e187",
                            EventId = 2
                        });
                });

            modelBuilder.Entity("Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Entrainement"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Lever de fond"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entreprise", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany("Entreprises")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Models.Event", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany("Events")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Events")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany("Events")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");
                });

            modelBuilder.Entity("Models.EventApplicationUser", b =>
                {
                    b.HasOne("Models.ApplicationUser", "ApplicationUser")
                        .WithMany("EventsParticipation")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Event", "Event")
                        .WithMany("Members")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
