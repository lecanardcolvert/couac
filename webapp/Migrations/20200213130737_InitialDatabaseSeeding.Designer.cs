// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace webapp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200213130737_InitialDatabaseSeeding")]
    partial class InitialDatabaseSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "dd877ad9-bab2-42a4-ad24-b9d3cbd397db",
                            ConcurrencyStamp = "d255b2c0-20ac-4b82-acac-484a15accd03",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "642fc052-6ef4-46c8-94a8-8cbc4d58abf0",
                            ConcurrencyStamp = "70caf04b-3820-4cc7-a2a3-512d920c6ee9",
                            Name = "CustomerPeople",
                            NormalizedName = "CUSTOMERPEOPLE"
                        },
                        new
                        {
                            Id = "d41d84ad-c113-4092-9714-3fb00153c109",
                            ConcurrencyStamp = "4a5d2b44-1016-4960-b4f1-c6ee9a77a965",
                            Name = "CustomerBusiness",
                            NormalizedName = "CUSTOMERBUSINESS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "424955bd-d31b-453e-9bf7-89b91dde0c9c",
                            RoleId = "dd877ad9-bab2-42a4-ad24-b9d3cbd397db"
                        },
                        new
                        {
                            UserId = "400919a5-8692-4bbc-88d3-f04e1f4ad2d3",
                            RoleId = "dd877ad9-bab2-42a4-ad24-b9d3cbd397db"
                        },
                        new
                        {
                            UserId = "a0930ac9-a90d-48ac-85da-e9f4341e7de7",
                            RoleId = "dd877ad9-bab2-42a4-ad24-b9d3cbd397db"
                        },
                        new
                        {
                            UserId = "64fc62c0-110b-4b0e-b45c-22dd9f03f6bd",
                            RoleId = "dd877ad9-bab2-42a4-ad24-b9d3cbd397db"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CivicNumber")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Terrebonne",
                            CivicNumber = 2502,
                            Country = "Canada",
                            PostalCode = "J6X 0A5",
                            State = "QC",
                            Street = "Des jacinthes"
                        },
                        new
                        {
                            Id = 2,
                            AppartmentNumber = 2,
                            City = "Montreal",
                            CivicNumber = 2265,
                            Country = "Canada",
                            PostalCode = "H1V 2E6",
                            State = "QC",
                            Street = "Boulevard PIE-IX"
                        },
                        new
                        {
                            Id = 3,
                            City = "Montreal",
                            CivicNumber = 4500,
                            Country = "Canada",
                            PostalCode = "H1V 3N8",
                            State = "QC",
                            Street = "Hochelaga"
                        });
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "424955bd-d31b-453e-9bf7-89b91dde0c9c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1323f696-0f4e-482a-a99c-d4c8da0743ce",
                            Email = "jordangauthier@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Jordan",
                            LastName = "Gauthier",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORDANGAUTHIER@NONAME.COM",
                            NormalizedUserName = "JORDANGAUTHIER@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJQXe2oST0ds4DFEOmaXzFiCcaZXESdMQ84FHLwZRwf8zsWJusY+mxFP6mZ4C8De+w==",
                            PhoneNumber = "514-979-7316",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b40f6a37-be16-4d1c-b221-465c590f1f91",
                            TwoFactorEnabled = false,
                            UserName = "jordangauthier@noname.com"
                        },
                        new
                        {
                            Id = "400919a5-8692-4bbc-88d3-f04e1f4ad2d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26634460-4374-46e9-b625-2276f632582f",
                            Email = "alexdufour@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Alex",
                            LastName = "Dufour",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXDUFOUR@NONAME.COM",
                            NormalizedUserName = "ALEXDUFOUR@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJQXe2oST0ds4DFEOmaXzFiCcaZXESdMQ84FHLwZRwf8zsWJusY+mxFP6mZ4C8De+w==",
                            PhoneNumber = "514-911-9111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6759718d-36d3-4853-be8a-dc4df849a71c",
                            TwoFactorEnabled = false,
                            UserName = "alexdufour@noname.com"
                        },
                        new
                        {
                            Id = "a0930ac9-a90d-48ac-85da-e9f4341e7de7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b8508197-2066-40e3-bfb5-dff02af52266",
                            Email = "alexhamel@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Alexandre",
                            LastName = "Hamel-Boudreault",
                            LockoutEnabled = false,
                            NormalizedEmail = "alexhamel@noname.com",
                            NormalizedUserName = "alexhamel@noname.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJQXe2oST0ds4DFEOmaXzFiCcaZXESdMQ84FHLwZRwf8zsWJusY+mxFP6mZ4C8De+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b3f7030-79a8-4b5f-814e-1bb992226d30",
                            TwoFactorEnabled = false,
                            UserName = "alexhamel@noname.com"
                        },
                        new
                        {
                            Id = "64fc62c0-110b-4b0e-b45c-22dd9f03f6bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e981c06-db38-42cc-b5ea-05b0296ea126",
                            Email = "philippesoucy@noname.com",
                            EmailConfirmed = false,
                            FirstName = "Philippe",
                            LastName = "Soucy",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHILIPPESOUCY@NONAME.COM",
                            NormalizedUserName = "PHILIPPESOUCY@NONAME.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJQXe2oST0ds4DFEOmaXzFiCcaZXESdMQ84FHLwZRwf8zsWJusY+mxFP6mZ4C8De+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18160938-2e8c-417d-a475-d0a102efcb91",
                            TwoFactorEnabled = false,
                            UserName = "philippesoucy@noname.com"
                        });
                });

            modelBuilder.Entity("Models.Entreprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("EntrepriseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntreprisePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Entreprise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            EntrepriseName = "Pro gym",
                            EntreprisePhone = "(514) 252-8704"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 1,
                            EntrepriseName = "Groupe tazor",
                            EntreprisePhone = "(514) 911-9111"
                        });
                });

            modelBuilder.Entity("Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<int?>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<double>("PriceToPayToParticipate")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            ApplicationUserId = "424955bd-d31b-453e-9bf7-89b91dde0c9c",
                            EndDate = new DateTime(2020, 2, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EntrepriseId = 1,
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 2, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Zumba de dufour"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ApplicationUserId = "400919a5-8692-4bbc-88d3-f04e1f4ad2d3",
                            EndDate = new DateTime(2020, 2, 25, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            EntrepriseId = 2,
                            EventTypeId = 1,
                            PriceToPayToParticipate = 50.0,
                            StartDate = new DateTime(2020, 2, 25, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Souper spaghetti de dufour (Lever de fond)"
                        });
                });

            modelBuilder.Entity("Models.EventApplicationUser", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventApplicationUsers");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = "424955bd-d31b-453e-9bf7-89b91dde0c9c",
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = "400919a5-8692-4bbc-88d3-f04e1f4ad2d3",
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = "424955bd-d31b-453e-9bf7-89b91dde0c9c",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "400919a5-8692-4bbc-88d3-f04e1f4ad2d3",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "64fc62c0-110b-4b0e-b45c-22dd9f03f6bd",
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = "a0930ac9-a90d-48ac-85da-e9f4341e7de7",
                            EventId = 2
                        });
                });

            modelBuilder.Entity("Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Entrainement"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Lever de fond"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entreprise", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Event", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entreprise", "Entreprise")
                        .WithMany("Events")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");
                });

            modelBuilder.Entity("Models.EventApplicationUser", b =>
                {
                    b.HasOne("Models.ApplicationUser", "ApplicationUser")
                        .WithMany("EventsParticipation")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Event", "Event")
                        .WithMany("Members")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
